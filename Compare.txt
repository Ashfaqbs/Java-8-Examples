
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;

public class ExcelCreator {

    public static void main(String[] args) {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("PHTS Data");

        // Create header row
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("Portfolio Year");
        headerRow.createCell(1).setCellValue("Portfolio");
        headerRow.createCell(2).setCellValue("Total");
        headerRow.createCell(3).setCellValue("Dental");
        headerRow.createCell(4).setCellValue("Medical");
        headerRow.createCell(5).setCellValue("Portfolio Year");
        headerRow.createCell(6).setCellValue("Portfolio");
        headerRow.createCell(7).setCellValue("Total");
        headerRow.createCell(8).setCellValue("Dental");
        headerRow.createCell(9).setCellValue("Medical");

        // Add data rows
        int rowCount = 1;

        // Add default values
        Row defaultDataRow = sheet.createRow(rowCount++);
        defaultDataRow.createCell(0).setCellValue("Default");
        defaultDataRow.createCell(1).setCellValue("Default");
        defaultDataRow.createCell(2).setCellValue(0);   // Default Total
        defaultDataRow.createCell(3).setCellValue(0);   // Default Dental
        defaultDataRow.createCell(4).setCellValue(0);   // Default Medical

        // Add data for 2017
        Row dataRow2017 = sheet.createRow(rowCount++);
        dataRow2017.createCell(5).setCellValue("2017");
        dataRow2017.createCell(6).setCellValue("Default");
        dataRow2017.createCell(7).setCellValue(14820);  // Total
        dataRow2017.createCell(8).setCellValue(137);    // Dental
        dataRow2017.createCell(9).setCellValue(14683);  // Medical

        // Add data for 2018
        Row dataRow2018 = sheet.createRow(rowCount++);
        dataRow2018.createCell(5).setCellValue("2018");
        dataRow2018.createCell(6).setCellValue("Default");
        dataRow2018.createCell(7).setCellValue(14405);  // Total
        dataRow2018.createCell(8).setCellValue(121);    // Dental
        dataRow2018.createCell(9).setCellValue(14284);  // Medical

        // Repeat for other years...

        // Write the workbook to an Excel file
        try (FileOutputStream outputStream = new FileOutputStream("output.xlsx")) {
            workbook.write(outputStream);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}












public class DataComparator {

    public static void main(String[] args) {
        YearlyData defaultData2017 = new YearlyData("2017", 137, 14683, 14820);
        YearlyData defaultData2018 = new YearlyData("2018", 121, 14284, 14405);
        
        YearlyData extractedData2017 = new YearlyData("2017", 137, 14683, 14820); // Replace with your extracted data
        YearlyData extractedData2018 = new YearlyData("2018", 120, 14285, 14405); // Replace with your extracted data
        
        compareAndPrintDifferences(defaultData2017, extractedData2017);
        compareAndPrintDifferences(defaultData2018, extractedData2018);
    }

    private static void compareAndPrintDifferences(YearlyData defaultData, YearlyData extractedData) {
        System.out.println("Comparing for year: " + defaultData.getPortfolioYear());

        if (defaultData.getDental() != extractedData.getDental()) {
            System.out.println("Dental values differ.");
        }

        if (defaultData.getMedical() != extractedData.getMedical()) {
            System.out.println("Medical values differ.");
        }

        if (defaultData.getTotal() != extractedData.getTotal()) {
            System.out.println("Total values differ.");
        }

        System.out.println(); // Empty line for separation
    }
}

class YearlyData {
    private String portfolioYear;
    private int dental;
    private int medical;
    private int total;

    public YearlyData(String portfolioYear, int dental, int medical, int total) {
        this.portfolioYear = portfolioYear;
        this.dental = dental;
        this.medical = medical;
        this.total = total;
    }

    public String getPortfolioYear() {
        return portfolioYear;
    }

    public int getDental() {
        return dental;
    }

    public int getMedical() {
        return medical;
    }

    public int getTotal() {
        return total;
    }
}



import java.util.HashMap;
import java.util.Map;

public class DataComparator {

    public static void main(String[] args) {
        Map<String, YearlyData> defaultData = getDefaultData();
        Map<String, YearlyData> extractedData = getExtractedData();

        for (String year : defaultData.keySet()) {
            YearlyData defaultYearlyData = defaultData.get(year);
            YearlyData extractedYearlyData = extractedData.getOrDefault(year, new YearlyData(year, 0, 0, 0));

            compareAndPrintDifferences(defaultYearlyData, extractedYearlyData);
        }
    }

    private static void compareAndPrintDifferences(YearlyData defaultData, YearlyData extractedData) {
        System.out.println("Comparing for year: " + defaultData.getPortfolioYear());

        if (defaultData.getDental() != extractedData.getDental()) {
            System.out.println("Dental values differ.");
        }

        if (defaultData.getMedical() != extractedData.getMedical()) {
            System.out.println("Medical values differ.");
        }

        if (defaultData.getTotal() != extractedData.getTotal()) {
            System.out.println("Total values differ.");
        }

        System.out.println(); // Empty line for separation
    }

    private static Map<String, YearlyData> getDefaultData() {
        Map<String, YearlyData> defaultData = new HashMap<>();
        
        // Populate default data for each year
        defaultData.put("2017", new YearlyData("2017", 137, 14683, 14820));
        defaultData.put("2018", new YearlyData("2018", 121, 14284, 14405));
        // ... Populate for other years
        
        return defaultData;
    }

    private static Map<String, YearlyData> getExtractedData() {
        Map<String, YearlyData> extractedData = new HashMap<>();
        
        // Populate extracted data for each year
        extractedData.put("2017", new YearlyData("2017", 137, 14683, 14820));
        extractedData.put("2018", new YearlyData("2018", 120, 14285, 14405));
        // ... Populate for other years
        
        return extractedData;
    }
}

class YearlyData {
    private String portfolioYear;
    private int dental;
    private int medical;
    private int total;

    public YearlyData(String portfolioYear, int dental, int medical, int total) {
        this.portfolioYear = portfolioYear;
        this.dental = dental;
        this.medical = medical;
        this.total = total;
    }

    public String getPortfolioYear() {
        return portfolioYear;
    }

    public int getDental() {
        return dental;
    }

    public int getMedical() {
        return medical;
    }

    public int getTotal() {
        return total;
    }
}




Map<String, Map<String, Integer>> mapOfMaps = new HashMap<>();

// Assuming mapOfMaps is populated...

mapOfMaps.entrySet().forEach(entry -> {
    Map<String, Integer> sortedInnerMap = 
        entry.getValue().entrySet().stream()
            .sorted(Map.Entry.comparingByValue())
            .collect(Collectors.toMap(
                Map.Entry::getKey, 
                Map.Entry::getValue, 
                (e1, e2) -> e1, 
                LinkedHashMap::new));
    mapOfMaps.put(entry.getKey(), sortedInnerMap);
});

Map<String, Integer> sortedInnerMap = 
    entry.getValue().entrySet().stream()
        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
        .collect(Collectors.toMap(
            Map.Entry::getKey, 
            Map.Entry::getValue, 
            (e1, e2) -> e1, 
            LinkedHashMap::new));




Map<String, Map<String, Integer>> mapOfMaps = new HashMap<>();

// Assuming mapOfMaps is populated...

mapOfMaps.entrySet().forEach(entry -> {
    Map<String, Integer> sortedInnerMap = 
        entry.getValue().entrySet().stream()
            .sorted(Map.Entry.comparingByKey())
            .collect(Collectors.toMap(
                Map.Entry::getKey, 
                Map.Entry::getValue, 
                (e1, e2) -> e1, 
                LinkedHashMap::new));
    mapOfMaps.put(entry.getKey(), sortedInnerMap);
});


Workbook workbook = new XSSFWorkbook();
Sheet sheet = workbook.createSheet("Map Data");

int rowCount = 0;

for (Map.Entry<String, String> entry : map.entrySet()) {
    Row row = sheet.createRow(++rowCount);

    int columnCount = 0;
    Cell cell = row.createCell(++columnCount);
    cell.setCellValue(entry.getKey());

    cell = row.createCell(++columnCount);
    cell.setCellValue(entry.getValue());
}

public void writeMapToExcel(Map<String, String> map) {
    Workbook workbook = new XSSFWorkbook();
    Sheet sheet = workbook.createSheet("Map Data");

    int rowCount = 0;

    for (Map.Entry<String, String> entry : map.entrySet()) {
        Row row = sheet.createRow(++rowCount);

        int columnCount = 0;
        Cell cell = row.createCell(++columnCount);
        cell.setCellValue(entry.getKey());

        cell = row.createCell(++columnCount);
        cell.setCellValue(entry.getValue());
    }

    try (FileOutputStream outputStream = new FileOutputStream("MapData.xlsx")) {
        workbook.write(outputStream);
    } catch (Exception e) {
        e.printStackTrace();
    }
}


--test


private Map<String, Integer> getDefaultCounts(int dentalCount, int medicalCount) {
    Map<String, Integer> defaultCounts = new HashMap<>();
    defaultCounts.put("Dental", dentalCount);
    defaultCounts.put("Medical", medicalCount);
    return defaultCounts;
}


private void setDefaultCounts(Map<String, Map<String, Integer>> yearTypeCounts, Map<String, Integer> yearTotalCounts) {
    // Set hardcoded default values for specific years
    yearTypeCounts.putIfAbsent("2017", getDefaultCounts(137, 14683));
    yearTotalCounts.putIfAbsent("2017", 14820);
    
    yearTypeCounts.putIfAbsent("2018", getDefaultCounts(/* default values for 2018 */));
    yearTotalCounts.putIfAbsent("2018", /* default total value for 2018 */);
    
    // ... Repeat for other years
    
    // You can continue this pattern for other years as well
}
private void processLine(String line, Map<String, Map<String, Integer>> yearTypeCounts, Map<String, Integer> yearTotalCounts) {
    // ... (same code as before)
    
    // Step 6: Set hardcoded default values for each year
    setDefaultCounts(yearTypeCounts, yearTotalCounts);
}



<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Loading Animation before Page Load</title>
<style>
  body {
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f0f0;
    font-family: Arial, sans-serif;
  }


  .loading-animation {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 9999;
    animation: fadeOut 2s forwards;
  }

  @keyframes fadeOut {
    0% { opacity: 1; }
    100% { opacity: 0; display: none; }
  }

  .spinner {
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
   .container {
    background-color: #fff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
    max-width: 400px;
    width: 100%;
  }

  .title {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
  }

  .file-upload {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
  }

  .file-upload input[type="file"] {
    display: none;
  }

  .file-upload label {
    background-color: #3498db;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    transition: background-color 0.3s ease-in-out;
  }

  .file-upload label:hover {
    background-color: #2980b9;
  }

  .submit-btn {
    background-color: #27ae60;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s ease-in-out;
  }

  .submit-btn:hover {
    background-color: #219c52;
  }
</style>
</head>
<body>
<div class="loading-animation">
  <div class="spinner"></div>
</div>

<div class="container" id="pageContent" style="display: none;">
  <h2 class="title">Upload Old and New Data Files</h2>
   <form action="/upload" method="post" enctype="multipart/form-data">
        <div class="file-upload">
            <input type="file" id="oldDataFile" name="oldDataFile" />
            <label for="oldDataFile">Choose Old Data File</label>
        </div>
        <div class="file-upload">
            <input type="file" id="newDataFile" name="newDataFile" />
            <label for="newDataFile">Choose New Data File</label>
        </div>
        <button class="submit-btn" type="submit">Generate Report</button>
        <div class="loader" id="loader"></div>
    </form>
</div>

<script>
  // Simulate animation delay
  setTimeout(function() {
    document.getElementById("pageContent").style.display = "block";
  }, 2000); // 2 seconds (you can adjust this value)
</script>
</body>
</html>
